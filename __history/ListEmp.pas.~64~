unit ListEmp;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics,
  Controls, Forms, uniGUITypes, uniGUIAbstractClasses,
  uniGUIClasses, uniGUIForm, DB, ZAbstractRODataset, ZAbstractDataset, ZDataset,
  ZAbstractConnection, ZConnection, uniDBNavigator, uniGUIBaseClasses,
  uniBasicGrid, uniDBGrid, uniButton, uniEdit, uniLabel, uniDBEdit,
  uniMultiItem, uniComboBox, uniDBComboBox, uniDBLookupComboBox,
  uniGridExporters, Dialogs, uniPanel;

type
  TUniForm1 = class(TUniForm)
    UniDBGrid1: TUniDBGrid;
    BtnSave: TUniButton;
    TxtUsername: TUniEdit;
    TxtPassword: TUniEdit;
    BtnExport: TUniButton;
    TxtNama: TUniEdit;
    CBRole: TUniComboBox;
    Bedit: TUniButton;
    BtnNew: TUniButton;
    BtnDelete: TUniButton;
    procedure UniForm1Create(Sender: TObject);
    procedure BtnSaveClick(Sender: TObject);
    procedure UniDBGridCellClick(Column: TUniDBGridColumn);
    procedure BtnExportClick(Sender: TObject);
    procedure BeditClick(Sender: TObject);
    procedure BtnNewClick(Sender: TObject);
    procedure BtnDeleteClick(Sender: TObject);
  private
    EmpId: Integer;
  public
  end;

function UniForm1: TUniForm1;

implementation

{$R *.dfm}
                                        
uses
  MainModule, uniGUIApplication, ServerModule, FrmCrtEmp;

function UniForm1: TUniForm1;
begin
  Result := TUniForm1(UniMainModule.GetFormInstance(TUniForm1));
end;

procedure TUniForm1.BtnExportClick(Sender: TObject);
var
  SL: TStringList;
  CSVLine: string;
begin
  SL := TStringList.Create;
  try
    // Menambahkan header kolom jika diperlukan
    SL.Add('name'); // Sesuaikan dengan nama kolom yang ada di grid

    // Mengisi data dari dataset
    UniDBGrid1.DataSource.DataSet.First;
    while not UniDBGrid1.DataSource.DataSet.Eof do
    begin
      CSVLine := Format('%s', [UniDBGrid1.DataSource.DataSet.FieldByName('name').AsString]);
      SL.Add(CSVLine);
      UniDBGrid1.DataSource.DataSet.Next;
    end;

    // Simpan ke file CSV
    SL.SaveToFile('C:\Users\user\Documents\ExportedData.csv');
    ShowMessage('Data berhasil diekspor ke CSV.');
  except
    on E: Exception do
      ShowMessage('Terjadi kesalahan saat mengekspor: ' + E.Message);
  end;
  SL.Free;
end;


procedure TUniForm1.BtnNewClick(Sender: TObject);
begin
  with TUniForm2.Create(UniApplication) do
  try
    ShowModal;
  finally

  end;
end;

procedure TUniForm1.BtnSaveClick(Sender: TObject);
var
  SelectedID: Integer;
  NewID: Integer;
begin
  UniServerModule.UserQuery.SQL.Clear;
  UniServerModule.EmployeeQuery.SQL.Clear;

  SelectedID := Integer(CBRole.Items.Objects[CBRole.ItemIndex]);

  if VarIsNull(EmpId) or (EmpId = 0) then
  begin
    // Menyisipkan data ke tx_user
    with UniServerModule.UserQuery do
    begin
      SQL.Clear;
      SQL.Add('INSERT INTO tx_user (username, password, role_id, created_at) ' +
            'VALUES (:username, :password, :role_id, :created_at);');
      ParamByName('username').Value := TxtUsername.Text;
      ParamByName('password').Value := TxtPassword.Text;
      ParamByName('role_id').Value := SelectedID;
      ParamByName('created_at').Value := Now;
      try
        ExecSQL;
      except
        on E: Exception do
        begin
          // Tangani kesalahan jika perlu
          Exit;
        end;
      end;
    end;

    // Mendapatkan ID yang baru saja diinsert
    UniServerModule.UserQuery.SQL.Clear;
    UniServerModule.UserQuery.SQL.Add('SELECT LAST_INSERT_ID() AS NewID;');
    UniServerModule.UserQuery.Open;
    NewID := UniServerModule.UserQuery.FieldByName('NewID').AsInteger;

    // Menyisipkan data ke tm_employee
    UniServerModule.UserQuery.SQL.Clear;
    UniServerModule.UserQuery.SQL.Add(
      'INSERT INTO tm_employee (user_id, name, created_at) ' +
      'VALUES (:user_id, :name, :created_at)');
    UniServerModule.UserQuery.ParamByName('user_id').Value := NewID;
    UniServerModule.UserQuery.ParamByName('name').Value := TxtNama.Text;
    UniServerModule.UserQuery.ParamByName('created_at').Value := Now;
    UniServerModule.UserQuery.ExecSQL;

    ShowMessage('Data berhasil disimpan');
  end
  else
  begin
    UniServerModule.UserQuery.SQL.Clear;
    UniServerModule.UserQuery.SQL.Add(
                                    'UPDATE tx_user SET username = :username, '
                                  + 'role_id = :role_id, updated_at = :updated_at '
                                  + 'WHERE id = :EmpId;');
    UniServerModule.UserQuery.ParamByName('username').Value := TxtUsername.Text;
    UniServerModule.UserQuery.ParamByName('role_id').Value := SelectedID;
    UniServerModule.UserQuery.ParamByName('updated_at').Value := Now;
    UniServerModule.UserQuery.ParamByName('EmpId').Value := EmpId;
    UniServerModule.UserQuery.ExecSQL;

    // Mengupdate data di tm_employee
    UniServerModule.UserQuery.SQL.Clear;
    UniServerModule.UserQuery.SQL.Add(
      'UPDATE tm_employee SET name = :name, updated_at = :updated_at ' +
      'WHERE user_id = :EmpId;');
    UniServerModule.UserQuery.ParamByName('name').Value := TxtNama.Text;
    UniServerModule.UserQuery.ParamByName('updated_at').Value := Now;
    UniServerModule.UserQuery.ParamByName('EmpId').Value := EmpId;
    UniServerModule.UserQuery.ExecSQL;

    ShowMessage('Data berhasil diupdate');
  end;

  // Refresh form atau melakukan tindakan lain setelah menyimpan
  UniForm1Create(Sender);
end;


procedure TUniForm1.BeditClick(Sender: TObject);
var
  ID: Integer;
begin
  ID := UniDBGrid1.DataSource.DataSet.FieldByName('id').AsInteger;

  with TUniForm2.Create(UniApplication) do
  try
    IDToEdit := ID;
    ShowModal;
  finally

  end;
end;

procedure TUniForm1.BtnDeleteClick(Sender: TObject);
var
Empname : String;
begin
  UniServerModule.UserQuery.SQL.Clear;
  UniServerModule.UserQuery.SQL.Text := 'SELECT name as :NAME FROM tm_employee WHERE user_id = :EmpId';
  EmpName := UniServerModule.UserQuery.ParamByName('NAME').AsString;
  MessageDlg('Are You Sure delete '+ Empname +'?', mtConfirmation, [mbYes, mbNo],
    procedure(Sender: TComponent; Res: Integer)
    begin
      if Res = mrYes then
      begin
        // Update data di tx_user
        UniServerModule.UserQuery.SQL.Clear;
        UniServerModule.UserQuery.SQL.Add(
          'UPDATE tx_user SET id_delete = 1, deleted_at = now() ' +
          'WHERE id = :EmpId');
        UniServerModule.UserQuery.ParamByName('EmpId').Value := EmpId;
        UniServerModule.UserQuery.ExecSQL;

        // Update data di tm_employee
        UniServerModule.UserQuery.SQL.Clear;
        UniServerModule.UserQuery.SQL.Add(
          'UPDATE tm_employee SET is_delete = 1, deleted_at = now() ' +
          'WHERE user_id = :EmpId');
        UniServerModule.UserQuery.ParamByName('EmpId').Value := EmpId;
        UniServerModule.UserQuery.ExecSQL;

        // Menampilkan pesan sukses
        UniSession.AddJS('Ext.Msg.alert("Success", "Record deleted successfully.");');
      end
      else
      begin
        // Menampilkan pesan batal
        UniSession.AddJS('Ext.Msg.alert("Cancelled", "Action was cancelled.");');
      end;
    end
  );
end;


procedure TUniForm1.UniDBGridCellClick(Column: TUniDBGridColumn);
var
  RoleId: Integer;
begin
  TxtUsername.Clear;
  TxtNama.Clear;
  CBRole.Text := '';
  EmpId := 0;

  TxtUsername.Text := UniDBGrid1.DataSource.DataSet.FieldByName('username').AsString;
  TxtNama.Text     := UniDBGrid1.DataSource.DataSet.FieldByName('name').AsString;
  EmpId            := UniDBGrid1.DataSource.DataSet.FieldByName('id').AsInteger;

  RoleId           := UniDBGrid1.DataSource.DataSet.FieldByName('role_id').AsInteger;

  CBRole.ItemIndex := CBRole.Items.IndexOfObject(TObject(RoleId));
end;

procedure TUniForm1.UniForm1Create(Sender: TObject);
begin
  UniServerModule.EmployeeQuery.SQL.Clear;
  UniServerModule.EmployeeQuery.SQL.Text := 'SELECT id, user_id, name, created_at, updated_at FROM tm_employee';
  UniServerModule.EmployeeQuery.Open;

  // Load roles into the combo box
  UniServerModule.RoleQuery.Open;
  CBRole.Clear; // Clear existing items

  UniServerModule.RoleQuery.Active := True;
  while not UniServerModule.RoleQuery.Eof do
  begin
    CBRole.Items.AddObject(UniServerModule.RoleQuery.FieldByName('name').AsString,
                           TObject(UniServerModule.RoleQuery.FieldByName('id').AsInteger));
    UniServerModule.RoleQuery.Next;
  end;

  UniServerModule.UserQuery.SQL.Clear;
  UniServerModule.UserQuery.SQL.Text := 'select u.*, e.*, r.name as role_name from tx_user u '
                                    + 'join tm_role r ON r.id = u.role_id '
                                    + 'join tm_employee e ON e.user_id = u.id '
                                    + 'where u.id_delete = 0';
  UniServerModule.UserQuery.Open;


end;

end.
